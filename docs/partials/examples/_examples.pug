+section('Examples')
  +subsection('Basic form')
    p.typo__p
      | For each value you want to validate, you have to create a key inside <kbd>validations</kbd> options.
      | You can specify when input becomes dirty by using appropriate event on your input box.
    +example('ExampleBasic')

  +subsection('Contextified validators')
    p.typo__p
      | You can link related fields by contextified validators. An example of this being <kbd>sameAs</kbd> builtin validator.
    +example('ExampleRepeatPassword')

  +subsection('Data nesting')
    p.typo__p
      | You can nest validators to match your data as deep as you want.
      | Parent validator errors out when any of its children reports an error.
      | This might be very useful for overall form validation.
    +example('ExampleNested')

  +subsection('Validation Groups')
    p.typo__p
      | If you want to create a validator that groups many otherwise unrelated
      | fields together, you can create a validation group.
    +example('ExampleValidationGroups')

  +subsection('Collections validation')
    p.typo__p
      | Array support with <kbd>$each</kbd> keyword
    +example('ExampleEachArray')

  +subsection('Asynchronous validation')
    p.typo__p
      | Async support is provided out of the box. Just use a validator that returns a promise.
      | Promise's success value is used for validation directly,
      | failed promise just fails the validation and throws the error.
    p.typo__p
      | Any component's data has to be accessed synchronously for correct reactive
      | behaviour. Store it as a variable in validator's scope
      | if you need to use it in any asynchronous callback, for example in <kbd>.then</kbd>.
    p.typo__p
      | Validator is evaluated on every data change, as it is essentially a computed value.
      | If you need to throttle an async call, do it on your data change event,
      | not on the validator itself. You may end up with broken Vue observables otherwise.

    +example('ExampleAsync')
    p.typo__p
      | The <kbd>async</kbd>/<kbd>await</kbd> syntax is fully supported. It works especially great in combination with Fetch API.
    div
      pre(v-pre).language-javascript
        code.
          validations: {
            async isUnique (value) {
              if (value === '') return true
              const response = await fetch(`/api/unique/${value}`)
              return Boolean(await response.json())
            }
          }

  +subsection('Delayed validation errors')
    p.typo__p
      | You can do anything you need with the $touch state, no matter how fancy your requirements are.
      | It all boils down to calling $touch and $reset in the right moment. As an example of that,
      | here is an easy to follow implementation of delayed error based on custom <kbd>setTimeout</kbd> logic.
      | It triggers one second after last input.
    +example('ExampleDelayedTouch')

  +subsection('Accessing validator parameters')
    p.typo__p
      | You can access information about your validations through `$params` of a parent validator.
      | This is be useful for reporting errors to users.
    +example('ExampleParams')

  +subsection('Accessing dynamic parameters')
    p.typo__p
      | bla bla
    +example('ExampleDynParams')
